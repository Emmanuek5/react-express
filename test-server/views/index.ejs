<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>React Express - Modern Server-Side Framework</title>
    <style>
      :root {
        --primary-color: #0066cc;
        --secondary-color: #4caf50;
        --background-color: #f5f7fa;
        --text-color: #333;
        --card-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      }

      body {
        margin: 0;
        padding: 0;
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
          Oxygen, Ubuntu, Cantarell, sans-serif;
        background: var(--background-color);
        color: var(--text-color);
      }

      .hero {
        background: linear-gradient(135deg, var(--primary-color), #003366);
        color: white;
        padding: 60px 20px;
        text-align: center;
      }

      .hero h1 {
        font-size: 2.5em;
        margin-bottom: 20px;
      }

      .hero p {
        font-size: 1.2em;
        max-width: 600px;
        margin: 0 auto;
        opacity: 0.9;
      }

      .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 40px 20px;
      }

      .features-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 30px;
        margin-top: 40px;
      }

      .feature-card {
        background: white;
        border-radius: 12px;
        padding: 30px;
        box-shadow: var(--card-shadow);
        transition: transform 0.3s ease;
      }

      .feature-card:hover {
        transform: translateY(-5px);
      }

      .feature-card h3 {
        color: var(--primary-color);
        margin-top: 0;
      }

      .demo-section {
        margin-top: 60px;
      }

      .demo-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        margin-top: 30px;
      }

      .demo-card {
        background: white;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: var(--card-shadow);
        transition: transform 0.3s ease;
      }

      .demo-card:hover {
        transform: translateY(-5px);
      }

      .demo-content {
        padding: 20px;
      }

      .demo-preview {
        background: #f0f0f0;
        height: 160px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 2em;
        color: #666;
      }

      .button {
        display: inline-block;
        padding: 12px 24px;
        background: var(--primary-color);
        color: white;
        text-decoration: none;
        border-radius: 6px;
        transition: background 0.3s ease;
      }

      .button:hover {
        background: #0052a3;
      }

      .nav-links {
        margin-top: 30px;
      }

      .nav-links a {
        margin: 0 10px;
        color: white;
        text-decoration: none;
        opacity: 0.8;
        transition: opacity 0.3s ease;
      }

      .nav-links a:hover {
        opacity: 1;
      }

      .quick-start {
        background: white;
        border-radius: 12px;
        padding: 30px;
        margin-top: 40px;
        box-shadow: var(--card-shadow);
      }

      .code-block {
        background: #1e1e1e;
        color: #d4d4d4;
        padding: 20px;
        border-radius: 8px;
        overflow-x: auto;
        margin: 20px 0;
      }

      .stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-top: 40px;
        text-align: center;
      }

      .stat-item {
        background: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: var(--card-shadow);
      }

      .stat-value {
        font-size: 2em;
        color: var(--primary-color);
        font-weight: bold;
      }

      .stat-label {
        margin-top: 10px;
        color: #666;
      }

      footer {
        background: #2c3e50;
        color: white;
        padding: 40px 20px;
        margin-top: 60px;
        text-align: center;
      }
    </style>
  </head>
  <body data-content>
    <div class="hero">
      <h1>React Express</h1>
      <p>
        A modern server-side framework combining the power of React with the
        simplicity of Express
      </p>
      <div class="nav-links">
        <a href="/forms-demo" data-route>Forms</a>
        <a href="/state-demo" data-route>State</a>
        <a href="/suspense-demo" data-route>Suspense</a>
        <a href="/advanced-demo" data-route prefetch>Advanced</a>
      </div>
    </div>

    <div class="container">
      <div class="stats">
        <div class="stat-item">
          <div class="stat-value" data-react-state="componentCount">0</div>
          <div class="stat-label">Components</div>
        </div>
        <div class="stat-item">
          <div class="stat-value" data-react-state="renderTime">0</div>
          <div class="stat-label">ms Render Time</div>
        </div>
        <div class="stat-item">
          <div class="stat-value" data-react-state="memoryUsage">0</div>
          <div class="stat-label">MB Memory</div>
        </div>
      </div>

      <div class="features-grid">
        <div class="feature-card">
          <h3>State Management</h3>
          <p>
            Powerful state management with reactive updates, computed
            properties, and centralized stores.
          </p>
        </div>
        <div class="feature-card">
          <h3>Form Handling</h3>
          <p>
            Seamless form handling with validation, transformation, and
            automatic state binding.
          </p>
        </div>
        <div class="feature-card">
          <h3>Suspense & Loading</h3>
          <p>
            Built-in suspense for handling async operations and loading states
            elegantly.
          </p>
        </div>
        <div class="feature-card">
          <h3>Error Boundaries</h3>
          <p>
            Robust error handling with customizable fallback UIs and recovery
            mechanisms.
          </p>
        </div>
        <div class="feature-card">
          <h3>Virtual DOM</h3>
          <p>
            Optimized rendering with virtual DOM diffing and efficient updates.
          </p>
        </div>
        <div class="feature-card">
          <h3>Animations</h3>
          <p>
            Smooth transitions and animations with built-in support for common
            patterns.
          </p>
        </div>
      </div>

      <div class="demo-section">
        <h2>Interactive Demos</h2>
        <div class="demo-grid">
          <div class="demo-card">
            <div class="demo-preview">üìù</div>
            <div class="demo-content">
              <h3>Forms Demo</h3>
              <p>
                Explore form handling with validation and state integration.
              </p>
              <a href="/forms-demo" class="button" data-route>Try Demo</a>
            </div>
          </div>
          <div class="demo-card">
            <div class="demo-preview">üîÑ</div>
            <div class="demo-content">
              <h3>State Demo</h3>
              <p>See reactive state management in action.</p>
              <a href="/state-demo" class="button" data-route>Try Demo</a>
            </div>
          </div>
          <div class="demo-card">
            <div class="demo-preview">‚è≥</div>
            <div class="demo-content">
              <h3>Suspense Demo</h3>
              <p>Handle async operations with grace.</p>
              <a href="/suspense-demo" class="button" data-route>Try Demo</a>
            </div>
          </div>
          <div class="demo-card">
            <div class="demo-preview">üöÄ</div>
            <div class="demo-content">
              <h3>Advanced Features</h3>
              <p>Explore error boundaries, hooks, and more.</p>
              <a href="/advanced-demo" class="button" data-route prefetch
                >Try Demo</a
              >
            </div>
          </div>
        </div>
      </div>

      <div class="quick-start">
        <h2>Quick Start</h2>
        <div class="code-block">
          <pre>
npm install react-express
const app = express();
const middleware = reactExpress();
middleware(app);

app.get("/", (req, res) => {
  res.render("index");
});</pre
          >
        </div>
      </div>
    </div>

    <footer>
      <p>React Express - Adding React Features to Express</p>
      <div class="nav-links">
        <a href="https://github.com/Emmanuek5/react-express">GitHub</a>
        <a href="/docs">Documentation</a>
        <a href="/examples">Examples</a>
      </div>
    </footer>

    <script>
      // Update stats periodically
      function updateStats() {
        ReactExpress.setState(
          "componentCount",
          Math.floor(Math.random() * 100) + 50
        );
        ReactExpress.setState("renderTime", Math.floor(Math.random() * 20) + 5);
        ReactExpress.setState(
          "memoryUsage",
          Math.floor(Math.random() * 100) + 20
        );
      }

      // Update every 3 seconds
      updateStats();
      setInterval(updateStats, 3000);
    </script>
  </body>
</html>
