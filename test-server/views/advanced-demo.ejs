<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Advanced Features Demo - React Express</title>
    <style>
      .container {
        max-width: 1000px;
        margin: 0 auto;
        padding: 20px;
      }
      .demo-card {
        background: white;
        border-radius: 8px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      }
      .error-ui {
        background: #fff3f3;
        border: 1px solid #ffcdd2;
        padding: 15px;
        border-radius: 4px;
        margin: 10px 0;
      }
      .error-ui button {
        background: #f44336;
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 4px;
        cursor: pointer;
        margin-top: 10px;
      }
      .animated-box {
        width: 100px;
        height: 100px;
        background: #0066cc;
        margin: 20px 0;
        transition: all 0.3s ease;
      }
      .animated-box.active {
        transform: translateX(200px) rotate(45deg);
        background: #4caf50;
      }
      .fade-enter {
        opacity: 0;
        transform: translateY(20px);
      }
      .fade-enter-active {
        opacity: 1;
        transform: translateY(0);
        transition: opacity 0.3s, transform 0.3s;
      }
      .theme-dark {
        background: #333;
        color: white;
      }
      .theme-light {
        background: #fff;
        color: #333;
      }
      .counter-value {
        font-size: 2em;
        margin: 10px 0;
      }
      .button-group {
        display: flex;
        gap: 10px;
        margin: 10px 0;
      }
      button {
        padding: 8px 16px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        background: #0066cc;
        color: white;
      }
      button:hover {
        background: #0052a3;
      }
      .list-item {
        padding: 10px;
        margin: 5px 0;
        background: #f5f5f5;
        border-radius: 4px;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }
    </style>
  </head>
  <body>
    <div class="container" data-content>
      <h1>Advanced Features Demo</h1>

      <!-- Error Boundary Demo -->
      <div class="demo-card">
        <h2>Error Boundary</h2>
        <div data-error-boundary="customErrorHandler">
          <button onclick="triggerError()">Trigger Error</button>
          <div id="error-prone-component"></div>
        </div>
        <script>
          function customErrorHandler(error) {
            return `
              <div class="error-ui">
                <h3>Oops! Something went wrong</h3>
                <p>${error.message}</p>
                <button onclick="retryOperation()">Retry</button>
              </div>
            `;
          }

          function triggerError() {
            throw new Error("This is a demo error!");
          }

          function retryOperation() {
            document.getElementById("error-prone-component").innerHTML =
              "Operation succeeded!";
          }
        </script>
      </div>

      <!-- Hooks Demo -->
      <div class="demo-card">
        <h2>Hooks Demo</h2>
        <div id="hooks-demo">
          <div class="counter-section">
            <div class="counter-value" data-react-state="hookCounter">0</div>
            <div class="button-group">
              <button onclick="decrementCounter()">-</button>
              <button onclick="incrementCounter()">+</button>
            </div>
          </div>

          <div class="effects-demo" data-react-subscribe="hookCounter">
            <h3>Effects Log</h3>
            <div id="effects-log"></div>
          </div>
        </div>
        <script>
          // useState hook
          const [getCounter, setCounter] = ReactExpress.hooks.useState(
            "hookCounter",
            0
          );

          // useEffect hook
          ReactExpress.hooks.useEffect(() => {
            const log = document.getElementById("effects-log");
            const message = `Counter changed to: ${getCounter()}`;
            log.innerHTML += `<div class="list-item">${message}</div>`;

            // Cleanup function
            return () => {
              log.innerHTML = "";
            };
          }, ["hookCounter"]);

          function incrementCounter() {
            setCounter(getCounter() + 1);
          }

          function decrementCounter() {
            setCounter(getCounter() - 1);
          }
        </script>
      </div>

      <!-- Virtual DOM Demo -->
      <div class="demo-card">
        <h2>Virtual DOM Demo</h2>
        <div id="vdom-demo">
          <div class="button-group">
            <button onclick="updateVirtualDOM()">Update DOM</button>
            <button onclick="forceRegularDOM()">Update Regular DOM</button>
          </div>
          <div id="vdom-container"></div>
          <div id="regular-dom-container"></div>
        </div>
        <script>
          const vdom = ReactExpress.createVDOM();

          function createListItems(count) {
            return Array.from({ length: count }, (_, i) => ({
              type: "div",
              props: {
                className: "list-item",
                children: `Item ${i + 1}`,
              },
            }));
          }

          function updateVirtualDOM() {
            const newItems = createListItems(1000);
            vdom.patch("vdom-container", newItems);
          }

          function forceRegularDOM() {
            const container = document.getElementById("regular-dom-container");
            container.innerHTML = "";
            createListItems(1000).forEach((item) => {
              const div = document.createElement("div");
              div.className = item.props.className;
              div.textContent = item.props.children;
              container.appendChild(div);
            });
          }
        </script>
      </div>

      <!-- Context Demo -->
      <div class="demo-card">
        <h2>Context Demo</h2>
        <div id="theme-context" class="theme-light">
          <div data-react-context="theme">
            <h3>
              Current Theme: <span data-react-state="currentTheme">light</span>
            </h3>
            <button onclick="toggleTheme()">Toggle Theme</button>

            <div class="nested-component">
              <h4>Nested Component</h4>
              <p>This component inherits the theme context</p>
            </div>
          </div>
        </div>
        <script>
          const ThemeContext = ReactExpress.createContext("theme", {
            theme: "light",
            toggleTheme: () => {
              const currentTheme = ThemeContext.getValue("theme");
              ThemeContext.setValue(
                "theme",
                currentTheme === "light" ? "dark" : "light"
              );

              const container = document.getElementById("theme-context");
              container.className = `theme-${ThemeContext.getValue("theme")}`;
            },
          });

          function toggleTheme() {
            ThemeContext.getValue("toggleTheme")();
          }
        </script>
      </div>

      <!-- Animations Demo -->
      <div class="demo-card">
        <h2>Animations Demo</h2>
        <div id="animations-demo">
          <div class="button-group">
            <button onclick="toggleAnimation()">Toggle Animation</button>
            <button onclick="addAnimatedItem()">Add Item</button>
          </div>

          <div class="animated-box" id="demo-box"></div>

          <div id="animated-list">
            <!-- Animated items will be added here -->
          </div>
        </div>
        <script>
          let isAnimated = false;

          function toggleAnimation() {
            const box = document.getElementById("demo-box");
            isAnimated = !isAnimated;
            box.classList.toggle("active", isAnimated);
          }

          function addAnimatedItem() {
            const list = document.getElementById("animated-list");
            const item = document.createElement("div");
            item.className = "list-item fade-enter";
            item.textContent = `Animated Item ${list.children.length + 1}`;

            list.appendChild(item);

            // Force reflow
            item.offsetHeight;

            // Add active class to trigger animation
            item.classList.add("fade-enter-active");

            // Remove animation classes after animation completes
            setTimeout(() => {
              item.classList.remove("fade-enter", "fade-enter-active");
            }, 300);
          }
        </script>
      </div>
    </div>
  </body>
</html>
